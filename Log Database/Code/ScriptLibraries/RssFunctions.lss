'++LotusScript Development Environment:2:5:(Options):0:74
Option Public
Option Declare

Option Compare Nocase

Use "OpenLogFunctions"

%REM
The classes in this script library are used to generate RSS feeds.

Version 1.5
%END REM



'++LotusScript Development Environment:2:5:(Forward):0:1
Declare Class RSSFormatter
Declare Class RSSHeader
Declare Class RSSItem
Declare Class QueryString

'++LotusScript Development Environment:2:5:(Declarations):0:10

'******************************************************************************
'** The RSSFormatter class does some basic formatting of elements
'** (dates, strings, etc.) that will end up as XML node text in our
'** RSS feed.
'******************************************************************************
Class RSSFormatter
	
	'** format a date/time Variant as an RFC 822 date, which is what
	'** RSS 0.9x and 2.0 are expecting
	Public Function FormatDate (dateVar As Variant) As String
		Dim dateTime As New NotesDateTime(dateVar)
		FormatDate = Format(dateTime.GMTTime, "ddd, dd mmm yyyy hh:mm:ss GMT")
	End Function
	
	
	'** replace ampersands and angle brackets in a string with 
	'** XML-friendly equivalents
	Public Function FormatXmlText (txt As String) As String
		Dim newtxt As String
		newtxt = txt
		
		newtxt = Replace(newtxt, "&", "&amp;")
		newtxt = Replace(newtxt, "<", "&lt;")
		newtxt = Replace(newtxt, ">", "&gt;")
		
		FormatXmlText = newtxt
	End Function
	
	
	'** replace any "]" characters in a CData string with an HTML
	'** hex representation
	Public Function FormatCData (txt As String) As String
		Dim newtxt As String
		newtxt = txt
		
		'newtxt = Replace(newtxt, "&", "&amp;")
		newtxt = FormatXmlText(newtxt)
		newtxt = Replace(newtxt, "]", "&#93;")
		
		FormatCData = newtxt
	End Function
	
	
	'** try to construct a valid URL for the current database
	Public Function GetDbUrl () As String
		Dim session As New NotesSession
		Dim db As NotesDatabase
		Dim dbUrl As String
		Dim pos As Integer
		
		Set db = session.CurrentDatabase
		dbUrl = db.HttpURL
		
		If (dbUrl = "") Then
			dbUrl = db.NotesURL
			dbUrl = "http://localhost/" & Strright(Strright(dbUrl, "@"), "/")
		Else
			dbUrl = Strleftback(dbUrl, "/")
			dbUrl = dbUrl & "/" & db.FilePath
		End If
		
		pos = Instr(1, dbUrl, "?opendatabase", 5)
		If (pos > 0) Then
			dbUrl = Left(dbUrl, pos - 1)
		End If
		
		GetDbUrl = Replace(dbUrl, "\", "/")
	End Function
End Class



'******************************************************************************
'** The RSSHeader class generates the header (non-<item>) elements
'** of our RSS feed. Essentially, you need an RSSHeader and a bunch
'** of RSSItems to create a full feed.
'******************************************************************************
Class RSSHeader
	Public xmlEncoding As String
	Public stylesheet As String
	Public buildDate As Variant
	Public language As String
	Public title As String
	Public description As String
	Public url As String
	Public image As String
	
	
	'** Set some defaults for all the member variables. Because everything
	'** in this class is a Public variable, you can change any of these things
	'** after the RSSHeader object is created.
	Public Sub New ()
		Dim formatter As New RSSFormatter
		Dim dbUrl As String
		dbUrl = formatter.GetDbUrl
		
		Me.title = "OpenLog RSS Feed"
		Me.description = "A custom RSS feed generated by the OpenLog database"
		Me.url = dbUrl
		Me.image = dbUrl & "/LogoSquare.gif?OpenImageResource"
		Me.buildDate = Now
		Me.language = "en-us"
		Me.xmlEncoding = "ISO-8859-1"
		Me.stylesheet = dbUrl & "/rsstransform.xslt"
	End Sub
	
	
	'** Generate the start of our RSS feed, based on the values of all the
	'** internal member variables.
	Public Function toString () As String
		Dim formatter As New RSSFormatter
		Dim header As String
		
		header = |<?xml version="1.0" encoding="| & xmlEncoding & |"?>
<?xml-stylesheet type="text/xsl" href="| & stylesheet & |"?>
<rss version="2.0">
<channel>
	<language>| & language & |</language>
	<lastBuildDate>| & formatter.FormatDate(buildDate) & |</lastBuildDate>
	<title>| & formatter.FormatXmlText(title) & |</title>
	<description>| & formatter.FormatXmlText(description) & |</description>
	<link>| & formatter.FormatXmlText(url) & |</link>
	<image>
	    <title>| & formatter.FormatXmlText(title) & |</title>
	    <url>| & formatter.FormatXmlText(url) & |</url>
	    <link>| & formatter.FormatXmlText(image) & |</link>
	</image>
|
		
		toString = header
	End Function
	
	
	'** Generate a string that will close the RSS feed, based on what we wrote
	'** in the toString method.
	Public Function getClosingString () As String
		getClosingString = "</channel></rss>"
	End Function
End Class


'******************************************************************************
'** The RSSItem class generates an <item> element for our RSS
'** feed based on a NotesDocument from this database.
'******************************************************************************
Class RSSItem
	Public doc As NotesDocument
	Public pubDate As Variant
	Public title As String
	Public description As String
	Public url As String
	Public author As String
	
	
	'** You can pass "Nothing" as a NotesDocument object,
	'** if you don't have a document yet
	Public Sub New (doc As NotesDocument)
		Call SetDocument(doc)
	End Sub
	
	
	'** Set/reset all the internal member variables based on the given
	'** NotesDocument.
	Public Sub SetDocument (doc As NotesDocument)
		Set Me.doc = doc
		If (doc Is Nothing) Then
			Exit Sub
		End If
		
		Dim formatter As New RSSFormatter
		Dim dbUrl As String
		dbUrl = formatter.GetDbUrl
		
		pubDate = doc.LogEventTime(0)
		url = dbUrl & "/0/" & doc.UniversalID & "?OpenDocument"
		
		Dim authName As New NotesName(doc.LogUserName(0))
		author = authName.Abbreviated
		
		Dim msg As String
		msg = doc.LogErrorMessage(0)
		If (msg = "") Then
			msg = doc.LogMessage(0)
		End If
		title = doc.LogEventTime(0) & ": " & Left(msg, 35)
		If (Len(msg) > 35) Then
			title = title & "..."
		End If
		
		description = |<h3>| & doc.LogEventType(0) & | occurred at | & _
		doc.LogEventTime(0) & |</h3><p>
<b>Server:</b> | & doc.LogFromServer(0) & |<br>
<b>Database:</b> | & doc.LogFromDatabase(0) & |<br>
<b>Agent:</b> | & doc.LogFromAgent(0) & |<br>
<b>Method:</b> | & doc.LogFromMethod(0) & |<br>
<b>Language:</b> | & doc.LogAgentLanguage(0) & |<br>
<hr><b>Message:</b><br> | & doc.LogMessage(0) & |<br>|
		
	End Sub
	
	
	'** Write everything to a String as an RSS-formatted <item> element
	Public Function toString ()
		Dim formatter As New RSSFormatter
		Dim item As String
		
		item = |	<item>
		<pubDate>| & formatter.FormatDate(pubDate) & |</pubDate>
		<title>| & formatter.FormatXmlText(title) & |</title>
		<description>| & formatter.FormatCData(description) & |</description>
		<link>| & formatter.FormatXmlText(url) & |</link>
		<author>| & formatter.FormatXmlText(author) & |</author>
	</item>
|
		
		toString = item
	End Function
	
End Class


'******************************************************************************
'** The QueryString class parses an HTTP query string and checks to
'** see if certain key values have been specified (either exactly or as a
'** wildcard match).
'******************************************************************************
Class QueryString
	Public qList List As String
	
	
	'** instantiate the object, based on a given query string of the
	'** format:  param1=value1&param2=value2&etc.
	Public Sub New (query As String)
		Dim q As Variant
		Dim qArray As Variant
		qArray = Split(query, "&")
		
		'** for the RSS feeds, we're expecting a special "Count" parameter
		'** to tell us how many results to return. Just in case we don't get it,
		'** default to 15 results (this will be overwritten if Count has been
		'** specified in the query string)
		qList("Count") = 15
		
		'** populate the qList with elements of the format qList(paramName) = value
		'** (making sure to decode any URL-encoded values)
		Forall stuff In qArray
			q = Evaluate( |@URLDecode("Domino";"| & stuff & |")| )
			qList(Strleft(q(0), "=")) = Strright(q(0), "=")
		End Forall
	End Sub
	
	
	'** Return the value specified by the Count parameter
	Public Function GetCount () As Integer
		On Error Resume Next
		GetCount = Cint(qList("Count"))
		
		'** the maximum number of results we'll want to return is 50
		If (GetCount < 1) Or (GetCount > 50) Then
			GetCount = 50
		End If
	End Function
	
	
	'** Check to see if a a given key/value pair is a match, based on the criteria
	'** specified in the query string
	Public Function IsMatch (key As String, value As String) As Integer
		'** default to True
		IsMatch = True
		
		'** if the key isn't in the list, it's a match
		If Not Iselement(qList(key)) Then
			Exit Function
		End If
		
		'** if the value to match is empty or *, it's a match
		Dim pattern As String
		pattern = qList(key)
		If (pattern = "") Or (pattern = "*") Then
			Exit Function
		End If
		
		'** otherwise, the Like statement will determine matchiness
		'** (this is an Option Compare NoCase piece of script, so the
		'** match is NOT case-sensitive)
		If Not (value Like pattern) Then
			IsMatch = False
		End If
	End Function
End Class
